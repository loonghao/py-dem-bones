name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      fast-mode:
        description: 'Run in fast mode (reduced test matrix)'
        required: false
        default: 'false'
        type: boolean
      skip-docs:
        description: 'Skip documentation build'
        required: false
        default: 'false'
        type: boolean

# Define permissions needed for this workflow
permissions:
  contents: write    # Needed for pushing to gh-pages branch
  pull-requests: write  # Needed for adding comments to PRs
  pages: write      # Needed for GitHub Pages deployment

# Concurrency configuration
concurrency:
  # Use workflow name and PR number or branch name as concurrency group
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  # Cancel in-progress runs when a new workflow run is triggered
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt
      
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # Configure retry mechanism
          python -m pip config set global.timeout 120
          python -m pip config set global.retries 5
          # Install dependencies
          python -m pip install --no-cache-dir -e ".[dev]"
          python -m pip install --no-cache-dir nox
      
      - name: Run linters
        shell: bash
        run: |
          python -m nox -s lint

  fast-build:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true' }}
    needs: [lint]  # Depends on lint job
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.11'
          - os: ubuntu-20.04
            python-version: '3.7'
    
    uses: ./.github/workflows/reusable-jobs.yml
    with:
      python-version: ${{ matrix.python-version }}
      os: ${{ matrix.os }}
      job-type: 'build'

  build:
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') }}
    needs: [lint]  # Depends on lint job
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.8'
          - os: ubuntu-latest
            python-version: '3.9'
          - os: ubuntu-latest
            python-version: '3.10'
          - os: ubuntu-latest
            python-version: '3.12'
          - os: ubuntu-latest
            python-version: '3.13'
    
    uses: ./.github/workflows/reusable-jobs.yml
    with:
      python-version: ${{ matrix.python-version }}
      os: ${{ matrix.os }}
      job-type: 'build'

  build-py37:
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name != 'pull_request' || github.base_ref == 'main') }}
    needs: [lint]  # Depends on lint job
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      
      - name: Set up Python 3.7
        uses: actions/setup-python@v5
        with:
          python-version: '3.7'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt
          allow-prereleases: true
          check-latest: true
      
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: ${{ runner.os }}-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            ${{ runner.os }}-eigen-
      
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # Configure retry mechanism
          python -m pip config set global.timeout 120
          python -m pip config set global.retries 5
          # Install dependencies
          python -m pip install --no-cache-dir build wheel setuptools twine
          python -m pip install --no-cache-dir nox
          # Specify compatible dependency versions for all Python 3.7 environments
          python -m pip install --no-cache-dir "isort<5.12.0" "black<23.3.0" "ruff<0.0.270"
          python -m pip install --no-cache-dir -e ".[dev]"
      
      - name: Initialize git submodules
        shell: bash
        run: |
          git config --global url.https://github.com/.insteadOf git@github.com:
          git config --global url.https://.insteadOf git://
          git submodule sync
          git submodule update --init --recursive
      
      - name: Install Eigen (Linux)
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          if [ -d "extern/eigen/Eigen" ]; then
            echo "Eigen already installed, skipping..."
          else
            bash .github/scripts/linux/setup_eigen.sh
          fi
      
      - name: Install Eigen (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: bash
        run: |
          if [ -d "extern/eigen/Eigen" ]; then
            echo "Eigen already installed, skipping..."
          else
            # Use pre-downloaded Eigen library to avoid cloning from GitLab every time
            mkdir -p extern/eigen
            curl -L -o eigen.zip https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.zip
            unzip -q eigen.zip
            cp -r eigen-3.4.0/Eigen extern/eigen/
            rm -rf eigen.zip eigen-3.4.0
          fi
      
      - name: Build package
        shell: bash
        run: |
          python -m nox -s build
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: py-dem-bones-python3.7-${{ runner.os }}
          path: dist/
          retention-days: 7


  docs-preview:
    name: Documentation Preview
    runs-on: ubuntu-latest
    # Only run on pull requests and when not explicitly skipped
    if: github.event_name == 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.skip-docs != 'true')
    needs: [lint]  # Run after linting passes
    
    # Ê∑ªÂä†Âπ∂ÂèëÊéßÂà∂ÔºåÈÅøÂÖç‰∏é docs.yml ÂÜ≤Á™Å
    concurrency:
      group: docs-preview-${{ github.ref }}
      cancel-in-progress: true
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt
      
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install --no-cache-dir nox
      
      - name: Build documentation with nox
        shell: bash
        run: |
          # Set environment variable to skip cmake build if needed
          export SKIP_CMAKE_BUILD=1
          # Build documentation using nox
          python -m nox -s docs
      
      - name: Create root index.html for GitHub Pages
        shell: bash
        run: |
          # Create a root index.html that redirects to the PR preview directory
          mkdir -p gh-pages-root
          mkdir -p gh-pages-root/pr-preview/${{ github.event.pull_request.number }}
          cp -r docs/_build/html/* gh-pages-root/pr-preview/${{ github.event.pull_request.number }}/
          
          # Create index.html in the root that lists all PR previews
          cat > gh-pages-root/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>py-dem-bones Documentation Previews</title>
            <meta http-equiv="refresh" content="0; url=pr-preview/${{ github.event.pull_request.number }}/">
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              h1 { color: #333; }
              .container { max-width: 800px; margin: 0 auto; }
              a { color: #0366d6; text-decoration: none; }
              a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>py-dem-bones Documentation Previews</h1>
              <p>Redirecting to PR #${{ github.event.pull_request.number }} preview...</p>
              <p>If you are not redirected automatically, follow this <a href="pr-preview/${{ github.event.pull_request.number }}/">link to the preview</a>.</p>
            </div>
          </body>
          </html>
          EOF
      
      - name: Deploy documentation preview
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages-root
          keep_files: true  # Keep existing files to preserve other PR previews
      
      - name: Add PR comment with preview link
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: docs-preview
          message: |
            üìù Documentation preview for this PR is available at:
            
            https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-preview/${{ github.event.pull_request.number }}/
            
            This preview will be updated automatically when new changes are pushed to this PR.
            
            Note: It may take a few minutes for GitHub Pages to update after deployment.

  docs-deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    # Only run on main branch and when not explicitly skipped
    if: github.ref == 'refs/heads/main' && (github.event_name != 'workflow_dispatch' || github.event.inputs.skip-docs != 'true')
    needs: [lint]  # Run after linting passes
    
    # Ê∑ªÂä†Âπ∂ÂèëÊéßÂà∂ÔºåÈÅøÂÖç‰∏é docs.yml ÂÜ≤Á™Å
    concurrency:
      group: docs-deploy-${{ github.ref }}
      cancel-in-progress: true
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt
      
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install --no-cache-dir nox
      
      - name: Build documentation with nox
        shell: bash
        run: |
          # Set environment variable to skip cmake build if needed
          export SKIP_CMAKE_BUILD=1
          # Build documentation using nox
          python -m nox -s docs
      
      - name: Create root index.html for GitHub Pages
        shell: bash
        run: |
          # Create a root directory structure
          mkdir -p gh-pages-root/latest
          cp -r docs/_build/html/* gh-pages-root/latest/
          
          # Create main index.html that redirects to latest docs
          cat > gh-pages-root/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>py-dem-bones Documentation</title>
            <meta http-equiv="refresh" content="0; url=latest/">
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              h1 { color: #333; }
              .container { max-width: 800px; margin: 0 auto; }
              a { color: #0366d6; text-decoration: none; }
              a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>py-dem-bones Documentation</h1>
              <p>Redirecting to latest documentation...</p>
              <p>If you are not redirected automatically, follow this <a href="latest/">link to the latest documentation</a>.</p>
              <p>For PR previews, check the <a href="pr-preview/">PR preview directory</a>.</p>
            </div>
          </body>
          </html>
          EOF
      
      - name: Deploy documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages-root
          keep_files: true  # Keep existing PR preview files

  test:
    if: ${{ github.event_name == 'pull_request' }}
    needs: [lint, build]  # Depends on lint and build jobs
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.8'
          - os: ubuntu-latest
            python-version: '3.9'
          - os: ubuntu-latest
            python-version: '3.10'
          - os: ubuntu-latest
            python-version: '3.12'
          - os: ubuntu-latest
            python-version: '3.13'
    
    uses: ./.github/workflows/reusable-jobs.yml
    with:
      python-version: ${{ matrix.python-version }}
      os: ${{ matrix.os }}
      job-type: 'test'
  
  test-py37:
    if: ${{ github.event_name == 'pull_request' }}
    needs: [lint, build-py37]  # Depends on lint and build-py37 jobs
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      
      - name: Set up Python 3.7
        uses: actions/setup-python@v5
        with:
          python-version: '3.7'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt
      
      # Cache Homebrew dependencies (macOS)
      - name: Cache Homebrew dependencies
        if: ${{ runner.os == 'macOS' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
          key: ${{ runner.os }}-brew-${{ hashFiles('.github/scripts/mac/setup_eigen.sh') }}
          restore-keys: |
            ${{ runner.os }}-brew-
      
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: ${{ runner.os }}-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            ${{ runner.os }}-eigen-
      
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # Configure retry mechanism
          python -m pip config set global.timeout 120
          python -m pip config set global.retries 5
          # Install test dependencies
          python -m pip install --no-cache-dir pytest pytest-cov
          python -m pip install --no-cache-dir nox
          # Specify compatible dependency versions for all Python 3.7 environments
          python -m pip install --no-cache-dir "isort<5.12.0" "black<23.3.0" "ruff<0.0.270"
          python -m pip install --no-cache-dir -e "."
      
      - name: Initialize git submodules
        shell: bash
        run: |
          git config --global url.https://github.com/.insteadOf git@github.com:
          git config --global url.https://.insteadOf git://
          git submodule sync
          git submodule update --init --recursive
      
      - name: Install Eigen
        shell: bash
        run: |
          if [ -d "extern/eigen/Eigen" ]; then
            echo "Eigen already installed, skipping..."
          else
            if [ "${{ runner.os }}" = "Linux" ]; then
              bash .github/scripts/linux/setup_eigen.sh
            elif [ "${{ runner.os }}" = "macOS" ]; then
              bash .github/scripts/mac/setup_eigen.sh
            else
              bash .github/scripts/win/setup_eigen.sh
            fi
          fi
      
      - name: Run tests
        shell: bash
        run: |
          python -m nox -s pytest
