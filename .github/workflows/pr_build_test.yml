name: PR Build and Test

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
  workflow_dispatch:

# Permissions needed for this workflow
permissions:
  contents: read
  pull-requests: write

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Increase timeout for pip
  PIP_DEFAULT_TIMEOUT: 100
  # Disable pip's cache, we'll use GitHub's cache
  PIP_NO_CACHE_DIR: true
  # Disable build isolation for faster builds
  PIP_NO_BUILD_ISOLATION: false
  # Set ccache version
  CCACHE_VERSION: "4.8.3"
  # Set scikit-build-core cache directory
  SKBUILD_BUILD_DIR: ".scikit-build"

jobs:
  # Build and test job
  build-and-test:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    timeout-minutes: 60  # Set a reasonable timeout
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows Latest MSVC",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              python: "3.8",
              generators: "Ninja"
            }
          - {
              name: "Ubuntu Latest GCC",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
              python: "3.8",
              generators: "Ninja"
            }
          - {
              name: "Python 3.7 Windows",
              os: windows-latest,
              cc: "cl",
              cxx: "cl",
              python: "3.7",
              generators: "Ninja"
            }

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python ${{ matrix.config.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.config.python }}
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt

      # Setup ccache
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: Setup ccache
        uses: actions/cache@v3
        with:
          path: .ccache
          key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.config.name }}-ccache-

      # Cache scikit-build-core build directory
      - name: Cache scikit-build-core build directory
        uses: actions/cache@v3
        with:
          path: ${{ env.SKBUILD_BUILD_DIR }}
          key: ${{ matrix.config.name }}-skbuild-${{ hashFiles('**/*.cpp', '**/*.h', 'CMakeLists.txt') }}
          restore-keys: |
            ${{ matrix.config.name }}-skbuild-

      # Download and setup ccache
      - name: Download ccache
        id: ccache
        shell: cmake -P {0}
        run: |
          set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${{ runner.os }}.tar.xz")
          file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)

      # Setup MSVC on Windows
      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      # Install Ninja
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      # Configure ccache
      - name: Configure ccache
        shell: cmake -P {0}
        run: |
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
          set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
          set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
          set(ENV{CCACHE_COMPRESS} "true")
          set(ENV{CCACHE_COMPRESSLEVEL} "6")
          set(ENV{CCACHE_MAXSIZE} "500M")
          if ("${{ matrix.config.cxx }}" STREQUAL "cl")
            set(ENV{CCACHE_MAXSIZE} "700M")
          endif()
          execute_process(COMMAND ccache -z)

      # Add Python 3.7 compatibility flags
      - name: Set Python 3.7 compatibility flags
        if: matrix.config.python == '3.7'
        run: |
          echo "PYTHON_37_COMPATIBLE=1" >> $GITHUB_ENV
        shell: bash

      # Install dependencies with uv
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        shell: bash
        if: runner.os != 'Windows'

      # Install uv on Windows
      - name: Install uv (Windows)
        if: runner.os == 'Windows'
        run: |
          (Invoke-WebRequest -Uri https://github.com/astral-sh/uv/releases/latest/download/uv-installer.ps1 -UseBasicParsing).Content | python -

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          uv pip install scikit-build-core>=0.11.3 pybind11>=2.13.0 numpy>=1.20.0 pytest>=7.4.0 pytest-cov>=4.1.0 pytest-timeout>=2.1.0 pytest-xdist>=3.3.0 pytest-rerunfailures>=12.0
        shell: bash

      # Configure CMake with ccache
      - name: Configure CMake
        run: |
          cmake -S . -B build -G "${{ matrix.config.generators }}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DPYBIND11_DETAILED_ERROR_MESSAGES=ON \
            -DPY_DEM_BONES_USE_OPENMP=ON
        shell: bash

      # Build with limited parallelism to avoid memory issues
      - name: Build
        run: |
          cmake --build build --config Release --parallel 2
        shell: bash

      # Show ccache stats
      - name: ccache statistics
        shell: bash
        run: |
          ccache -s

      # Install the package
      - name: Install package
        run: |
          cd build
          cmake --install . --prefix install
          cd ..
          python -m pip install -e .

      # Run tests
      - name: Run tests
        run: |
          python -m pytest tests -v --xvs -k "not benchmark" --reruns 2

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.config.name }}
          path: |
            coverage.xml
            .pytest_cache
          if-no-files-found: ignore

      # Build wheel
      - name: Build wheel
        run: |
          python -m pip install build
          python -m build --wheel
        shell: bash

      # Upload built wheel as artifact
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: py-dem-bones-py${{ matrix.config.python }}-${{ runner.os }}
          path: dist/*.whl
          if-no-files-found: ignore

      # Comment on PR if successful
      - name: Comment on PR
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ Build and tests successful on ${{ matrix.config.name }}!`
            });

      # Comment on PR if failed
      - name: Comment on PR (failure)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ Build or tests failed on ${{ matrix.config.name }}. Please check the logs for details.`
            });
