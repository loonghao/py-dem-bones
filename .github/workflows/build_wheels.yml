name: Build Wheels

on:
  push:
    branches: [main, update_use_poetry]
    tags:
      - 'v*'
      - '[0-9]+.[0-9]+.[0-9]+*'
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to build (all if empty)'
        required: false
        default: ''
      platform:
        description: 'Platform to build (all if empty)'
        required: false
        default: ''

# Permissions needed for this workflow
permissions:
  contents: read
  pull-requests: write

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.name || matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          # Add ARM64 Linux build
          - os: ubuntu-latest
            name: linux-aarch64
            cibw-arch: aarch64
          # Add ARM64 macOS build (on Apple Silicon runner)
          - os: macos-14 # Apple Silicon
            name: macos-arm64
            cibw-arch: arm64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Setup MSVC on Windows
      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      # Set up QEMU for ARM64 emulation on Linux
      - name: Set up QEMU
        if: runner.os == 'Linux' && matrix.cibw-arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # Build wheels
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          # Build selection
          CIBW_BUILD: ${{ github.event.inputs.python-version || 'cp37-* cp38-* cp39-* cp310-* cp311-* cp312-*' }}
          CIBW_SKIP: "pp* *-musllinux*"
          CIBW_ARCHS: ${{ matrix.cibw-arch || 'auto64' }}
          CIBW_PLATFORM: ${{ github.event.inputs.platform || 'auto' }}

          # General settings
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ENVIRONMENT: "PIP_DISABLE_PIP_VERSION_CHECK=1"
          CIBW_BEFORE_BUILD: "git submodule update --init --recursive"
          CIBW_TEST_COMMAND: "python -c \"import py_dem_bones; print(py_dem_bones.__version__)\""
          CIBW_TEST_REQUIRES: "pytest numpy>=1.20.0"

          # Linux specific settings
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
          CIBW_MANYLINUX_I686_IMAGE: "manylinux2014"
          CIBW_BEFORE_ALL_LINUX: "yum install -y cmake ninja-build"
          CIBW_ENVIRONMENT_LINUX: "PIP_DISABLE_PIP_VERSION_CHECK=1 CMAKE_ARGS='-DCMAKE_POSITION_INDEPENDENT_CODE=ON -DPY_DEM_BONES_USE_OPENMP=ON' SKBUILD_BUILD_DIR='.scikit-build'"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"

          # macOS specific settings
          CIBW_ENVIRONMENT_MACOS: "PIP_DISABLE_PIP_VERSION_CHECK=1 CMAKE_ARGS='-DCMAKE_POSITION_INDEPENDENT_CODE=ON -DPY_DEM_BONES_USE_OPENMP=ON' MACOSX_DEPLOYMENT_TARGET='10.14' SKBUILD_BUILD_DIR='.scikit-build'"
          CIBW_BEFORE_ALL_MACOS: "brew install cmake ninja"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"

          # Windows specific settings
          CIBW_ENVIRONMENT_WINDOWS: "PIP_DISABLE_PIP_VERSION_CHECK=1 CMAKE_ARGS='-DCMAKE_POSITION_INDEPENDENT_CODE=ON -DPY_DEM_BONES_USE_OPENMP=ON' SKBUILD_BUILD_DIR='.scikit-build'"
          CIBW_BEFORE_ALL_WINDOWS: "pip install cmake ninja"

          # Python 3.7 specific settings
          CIBW_ENVIRONMENT_PASS_LINUX: PYTHON_37_COMPATIBLE

      # Upload wheels as artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.name || matrix.os }}-${{ matrix.cibw-arch || 'x86_64' }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # Test the built wheels
  test_wheels:
    name: Test wheels on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    needs: build_wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce matrix size
          - os: windows-latest
            python-version: '3.9'
          - os: ubuntu-latest
            python-version: '3.10'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Download wheels
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-${{ matrix.os }}*
          path: dist
          merge-multiple: true

      # List available wheels
      - name: List available wheels
        run: |
          ls -la dist/

      # Install wheel
      - name: Install wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install --find-links=dist py-dem-bones
          python -c "import py_dem_bones; print(py_dem_bones.__version__)"

      # Run basic tests
      - name: Run basic tests
        run: |
          python -m pip install pytest numpy
          python -c "
          import py_dem_bones
          import numpy as np
          import sys

          print(f'Python version: {sys.version}')
          print(f'Successfully imported py_dem_bones version: {getattr(py_dem_bones, \"__version__\", \"unknown\")}')

          # Create a DemBonesWrapper instance
          dem_bones = py_dem_bones.DemBonesWrapper()
          print('Created DemBonesWrapper instance')

          # Set some parameters
          dem_bones.num_bones = 2
          dem_bones.num_vertices = 4
          print('Set parameters')

          # Create some test data
          rest_pose = np.array([
              [0, 0, 0],  # Vertex 0
              [1, 0, 0],  # Vertex 1
              [0, 1, 0],  # Vertex 2
              [1, 1, 0]   # Vertex 3
          ], dtype=np.float64).T  # Transpose to get 3 x n_vertices shape

          # Set rest pose
          dem_bones.set_rest_pose(rest_pose)
          print('Set rest pose')

          # Create animated poses (just a copy of rest pose for simplicity)
          animated_poses = np.tile(rest_pose, (1, 1))

          # Set animated poses
          dem_bones.set_animated_poses(animated_poses)
          print('Set animated poses')

          # Try to compute
          try:
              dem_bones.compute()
              print('Computation successful')
          except Exception as e:
              print(f'Computation failed: {e}')

          print('All tests passed!')
          "

      # Comment on PR if successful
      - name: Comment on PR
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Wheel test successful on ${{ matrix.os }} with Python ${{ matrix.python-version }}!`
            });

  # Note: PyPI upload is handled by release.yml
  # This workflow only builds and tests wheels
