name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      fast-mode:
        description: 'Skip slow builds (ARM, etc.)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

# Global environment variables
env:
  PACKAGE_NAME: py_dem_bones
  PYTHON_VERSION: '3.9'
  CIBW_BUILD_VERBOSITY: 3

jobs:
  # ---------------------------------------------------------------------------
  # Linux Wheels
  # ---------------------------------------------------------------------------
  linux-wheels:
    name: Build wheels on Linux
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # CPython 64 bits manylinux2014
          - build: CPython 3.9 64 bits manylinux2014
            manylinux: manylinux2014
            python: cp39-manylinux_x86_64
            arch: x86_64
          - build: CPython 3.10 64 bits manylinux2014
            manylinux: manylinux2014
            python: cp310-manylinux_x86_64
            arch: x86_64
          - build: CPython 3.11 64 bits manylinux2014
            manylinux: manylinux2014
            python: cp311-manylinux_x86_64
            arch: x86_64
          - build: CPython 3.12 64 bits manylinux2014
            manylinux: manylinux2014
            python: cp312-manylinux_x86_64
            arch: x86_64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Cache Eigen library
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: ${{ runner.os }}-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            ${{ runner.os }}-eigen-

      # Set up ccache for faster builds
      - name: Set up ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      # Build wheels using cibuildwheel action
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux }}

          # Simple test to verify module can be imported
          CIBW_BEFORE_TEST: "python -m pip install pytest"
          CIBW_TEST_COMMAND: "python -c \"import py_dem_bones; print(f'Successfully loaded py_dem_bones version {py_dem_bones.__version__}')\""

          # Additional environment variables for Linux
          CIBW_ENVIRONMENT: >
            LANG="C.UTF-8"
            LC_ALL="C.UTF-8"
            CCACHE_DIR="$HOME/.ccache"
            CC="ccache gcc"
            CXX="ccache g++"

            SKBUILD_BUILD_VERBOSE=1

      # Upload wheels
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.python }}-${{ matrix.manylinux }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # ---------------------------------------------------------------------------
  # Linux ARM Wheels
  # ---------------------------------------------------------------------------
  linux-arm-wheels:
    name: Build wheels on Linux ARM
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # CPython ARM 64 bits manylinux2014
          - build: CPython 3.9 ARM 64 bits manylinux2014
            manylinux: manylinux2014
            python: cp39-manylinux_aarch64
            arch: aarch64
          - build: CPython 3.10 ARM 64 bits manylinux2014
            manylinux: manylinux2014
            python: cp310-manylinux_aarch64
            arch: aarch64
          - build: CPython 3.11 ARM 64 bits manylinux2014
            manylinux: manylinux2014
            python: cp311-manylinux_aarch64
            arch: aarch64
          - build: CPython 3.12 ARM 64 bits manylinux2014
            manylinux: manylinux2014
            python: cp312-manylinux_aarch64
            arch: aarch64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Cache Eigen library
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: ${{ runner.os }}-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            ${{ runner.os }}-eigen-

      # Set up QEMU for Linux ARM builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # Build wheels using cibuildwheel action
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_MANYLINUX_AARCH64_IMAGE: ${{ matrix.manylinux }}

          # Simple test to verify module can be imported
          CIBW_BEFORE_TEST: "python -m pip install pytest"
          CIBW_TEST_COMMAND: "python -c \"import py_dem_bones; print(f'Successfully loaded py_dem_bones version {py_dem_bones.__version__}')\""

          # Additional environment variables for Linux ARM
          CIBW_ENVIRONMENT: >
            LANG="C.UTF-8"
            LC_ALL="C.UTF-8"

            SKBUILD_BUILD_VERBOSE=1

      # Upload wheels
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.python }}-${{ matrix.manylinux }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # ---------------------------------------------------------------------------
  # macOS Wheels
  # ---------------------------------------------------------------------------
  macos-wheels:
    name: Build wheels on macOS
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        include:
          # CPython 64 bits
          - build: CPython 3.9 64 bits
            python: cp39-macosx_x86_64
            arch: x86_64
          - build: CPython 3.10 64 bits
            python: cp310-macosx_x86_64
            arch: x86_64
          - build: CPython 3.11 64 bits
            python: cp311-macosx_x86_64
            arch: x86_64
          - build: CPython 3.12 64 bits
            python: cp312-macosx_x86_64
            arch: x86_64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Cache Eigen library
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: ${{ runner.os }}-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            ${{ runner.os }}-eigen-

      # Set up ccache for faster builds
      - name: Set up ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      # Build wheels using cibuildwheel action
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_ARCHS: ${{ matrix.arch }}
          CMAKE_GENERATOR: "Unix Makefiles"

          # Simple test to verify module can be imported
          CIBW_BEFORE_TEST: "python -m pip install pytest"
          CIBW_TEST_COMMAND: "python -c \"import py_dem_bones; print(f'Successfully loaded py_dem_bones version {py_dem_bones.__version__}')\""

          # Additional environment variables for macOS
          CIBW_ENVIRONMENT: >
            MAKEFLAGS="-j4"
            MACOSX_DEPLOYMENT_TARGET="11.0"
            CCACHE_DIR="$HOME/.ccache"
            CC="ccache clang"
            CXX="ccache clang++"

            SKBUILD_BUILD_VERBOSE=1

      # Upload wheels
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.python }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # ---------------------------------------------------------------------------
  # macOS ARM Wheels
  # ---------------------------------------------------------------------------
  macos-arm-wheels:
    name: Build wheels on macOS ARM
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        include:
          # CPython ARM 64 bits
          - build: CPython 3.9 ARM 64 bits
            python: cp39-macosx_arm64
            arch: arm64
          - build: CPython 3.10 ARM 64 bits
            python: cp310-macosx_arm64
            arch: arm64
          - build: CPython 3.11 ARM 64 bits
            python: cp311-macosx_arm64
            arch: arm64
          - build: CPython 3.12 ARM 64 bits
            python: cp312-macosx_arm64
            arch: arm64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-python@v5
        name: Install Python
        # https://cibuildwheel.pypa.io/en/stable/faq/#macos-building-cpython-38-wheels-on-arm64
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Cache Eigen library
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: ${{ runner.os }}-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            ${{ runner.os }}-eigen-

      # Set up ccache for faster builds
      - name: Set up ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      # Build wheels using cibuildwheel action
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_ARCHS: ${{ matrix.arch }}
          CMAKE_GENERATOR: "Unix Makefiles"

          # Simple test to verify module can be imported
          CIBW_BEFORE_TEST: "python -m pip install pytest"
          CIBW_TEST_COMMAND: "python -c \"import py_dem_bones; print(f'Successfully loaded py_dem_bones version {py_dem_bones.__version__}')\""

          # Additional environment variables for macOS ARM
          CIBW_ENVIRONMENT: >
            MAKEFLAGS="-j4"
            MACOSX_DEPLOYMENT_TARGET="11.0"
            CCACHE_DIR="$HOME/.ccache"
            CC="ccache clang"
            CXX="ccache clang++"

            SKBUILD_BUILD_VERBOSE=1

      # Upload wheels
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.python }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # ---------------------------------------------------------------------------
  # Windows Wheels
  # ---------------------------------------------------------------------------
  windows-wheels:
    name: Build wheels on Windows
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        include:
          # CPython 64 bits
          - build: CPython 3.9 64 bits
            python: cp39-win_amd64
            arch: AMD64
          - build: CPython 3.10 64 bits
            python: cp310-win_amd64
            arch: AMD64
          - build: CPython 3.11 64 bits
            python: cp311-win_amd64
            arch: AMD64
          - build: CPython 3.12 64 bits
            python: cp312-win_amd64
            arch: AMD64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Install Ninja for faster builds
      - name: Install Ninja
        run: choco install -y ninja --force
        shell: pwsh

      # Build wheels using cibuildwheel action
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_ARCHS: ${{ matrix.arch }}

          # Simple test to verify module can be imported
          CIBW_BEFORE_TEST: "python -m pip install pytest"
          CIBW_TEST_COMMAND: "python -c \"import py_dem_bones; print(f'Successfully loaded py_dem_bones version {py_dem_bones.__version__}')\""

          # Additional environment variables for Windows
          CIBW_ENVIRONMENT: >
            CMAKE_GENERATOR="Ninja"
            CMAKE_POSITION_INDEPENDENT_CODE="ON"

            SKBUILD_BUILD_VERBOSE=1

      # Upload wheels
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.python }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # Run tests during PR
  test-code:
    name: Test code on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    # Only run tests during PR
    if: github.event_name == 'pull_request'
    needs: [linux-wheels, linux-arm-wheels, macos-wheels, macos-arm-wheels, windows-wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        python-version: ['3.9', '3.10', '3.12']

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          path: ./wheelhouse
          merge-multiple: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov numpy

      - name: Find and install wheel for current platform
        shell: bash
        run: |
          # Determine platform-specific pattern
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            PATTERN="*win_amd64*.whl"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            if [[ "${{ matrix.os }}" == "macos-14" ]]; then
              PATTERN="*macosx_arm64*.whl"
            else
              PATTERN="*macosx_x86_64*.whl"
            fi
          else
            PATTERN="*manylinux*.whl"
          fi

          # Find Python version specific wheel
          PY_VER=$(echo ${{ matrix.python-version }} | tr -d '.')
          WHEEL=$(find ./wheelhouse -name "*cp${PY_VER}*${PATTERN}" | head -1)

          if [ -n "$WHEEL" ]; then
            echo "Installing wheel: $WHEEL"
            pip install "$WHEEL"
          else
            echo "No matching wheel found for Python ${{ matrix.python-version }} on ${{ runner.os }}"
            echo "Available wheels:"
            find ./wheelhouse -name "*.whl"
            exit 1
          fi

      - name: Run tests
        run: |
          pytest tests/test_basic.py -v

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false

  # Test Windows compatibility
  test-windows:
    name: Test Windows compatibility
    needs: [windows-wheels]
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.11']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install build dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest numpy

      - name: Install Visual C++ Redistributable
        shell: pwsh
        run: |
          # Download and install the latest Visual C++ Redistributable
          Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vc_redist.x64.exe -OutFile vc_redist.x64.exe
          Start-Process -FilePath "vc_redist.x64.exe" -ArgumentList "/quiet", "/norestart" -Wait
          Write-Host "Visual C++ Redistributable installed"

      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-cp*-win_amd64
          path: dist
          merge-multiple: true

      - name: List available wheels
        shell: pwsh
        run: |
          Write-Host "Available wheels in dist directory:"
          Get-ChildItem -Path dist -Filter "*.whl" | ForEach-Object { Write-Host "  $($_.Name)" }

      - name: Test pre-built wheel
        shell: pwsh
        run: |
          # Find the wheel for the current Python version
          $pythonVersion = "${{ matrix.python-version }}".Replace(".", "")
          $shortVersion = if ($pythonVersion.Length -gt 2) { $pythonVersion.Substring(0, 2) } else { $pythonVersion }
          $wheelPattern = "py_dem_bones-*-cp${shortVersion}*win*.whl"
          Write-Host "Looking for wheel matching pattern: $wheelPattern"

          $wheel = Get-ChildItem -Path dist -Filter $wheelPattern | Select-Object -First 1
          if ($wheel) {
            Write-Host "Found wheel: $($wheel.FullName)" -ForegroundColor Green

            # Install the wheel
            python -m pip install $wheel.FullName

            # Run the test
            python -c "import py_dem_bones; print(f'Successfully loaded py_dem_bones version {py_dem_bones.__version__}')"
            pytest tests/test_basic.py -v
          } else {
            Write-Host "No wheel found matching pattern: $wheelPattern" -ForegroundColor Red
            exit 1
          }

  # ---------------------------------------------------------------------------
  # Upload to PyPI
  # ---------------------------------------------------------------------------
  upload-pypi:
    name: Upload to PyPI
    needs: [linux-wheels, linux-arm-wheels, macos-wheels, macos-arm-wheels, windows-wheels]
    # Only run on release or manual dispatch
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/py-dem-bones/
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          path: dist
          merge-multiple: true

      - name: Build source distribution
        run: |
          python -m pip install build
          python -m build --sdist

      - name: List distribution files
        run: |
          ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
