name: Release

on:
  push:
    tags:
      - 'v*'  # Match all version tags, e.g., v0.1.0
  workflow_dispatch:
    inputs:
      fast-mode:
        description: 'Fast mode (reduced build variants)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

# Concurrency control to avoid duplicate runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Fast build mode - only runs when manually triggered
  fast-build:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true' }}
    name: Fast Build Python ${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Main platform and version combinations
          - os: ubuntu-latest
            python-version: '3.11'  # Latest stable version
          - os: macos-latest
            python-version: '3.11'  # Latest stable version
          - os: windows-latest
            python-version: '3.11'  # Latest stable version
          # Python 3.7 compatibility test
          - os: ubuntu-20.04
            python-version: '3.7'
    
    uses: ./.github/workflows/reusable-jobs.yml
    with:
      python-version: ${{ matrix.python-version }}
      os: ${{ matrix.os }}
      job-type: 'build'

  # Build wheels using cibuildwheel
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2019, macos-13, macos-14]
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      # Initialize git submodules
      - name: Initialize git submodules
        shell: bash
        run: |
          git config --global url.https://github.com/.insteadOf git@github.com:
          git config --global url.https://.insteadOf git://
          git submodule sync
          git submodule update --init --recursive
      
      # Cache Eigen library
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: ${{ runner.os }}-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            ${{ runner.os }}-eigen-
      
      # Install Eigen (Linux)
      - name: Install Eigen (Linux)
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          if [ -d "extern/eigen/Eigen" ]; then
            echo "Eigen already installed, skipping..."
          else
            bash .github/scripts/linux/setup_eigen.sh
          fi
      
      # Install Eigen (macOS)
      - name: Install Eigen (macOS)
        if: ${{ runner.os == 'macOS' }}
        shell: bash
        run: |
          if [ -d "extern/eigen/Eigen" ]; then
            echo "Eigen already installed, skipping..."
          else
            bash .github/scripts/mac/setup_eigen.sh
          fi
      
      # Install Eigen (Windows)
      - name: Install Eigen (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: bash
        run: |
          if [ -d "extern/eigen/Eigen" ]; then
            echo "Eigen already installed, skipping..."
          else
            bash .github/scripts/win/setup_eigen.sh
          fi
      
      # Set up macOS specific environment
      - name: Setup macOS
        if: runner.os == 'macOS'
        run: |
          echo "FC=gfortran-13" >> $GITHUB_ENV
          echo "F77=gfortran-13" >> $GITHUB_ENV
          echo "F90=gfortran-13" >> $GITHUB_ENV
          
          # Set deployment target based on runner
          if [[ "${{ matrix.os }}" == "macos-14" ]]; then
            # Apple Silicon (arm64) uses higher deployment target
            echo "CIBW_ENVIRONMENT_MACOS=MACOSX_DEPLOYMENT_TARGET=11.0 PKG_CONFIG_PATH=$PWD/.openblas" >> $GITHUB_ENV
          else
            # Intel (x86_64) uses lower deployment target for compatibility
            echo "CIBW_ENVIRONMENT_MACOS=MACOSX_DEPLOYMENT_TARGET=10.14 PKG_CONFIG_PATH=$PWD/.openblas" >> $GITHUB_ENV
          fi
      
      # Set up Windows specific environment
      - name: Setup Windows
        if: runner.os == 'Windows'
        run: |
          echo "CIBW_ENVIRONMENT_WINDOWS=PKG_CONFIG_PATH=${{ github.workspace }}" >> $env:GITHUB_ENV
      
      # Build wheels using cibuildwheel (non-Windows environments)
      - name: Build wheels (Linux/macOS)
        if: runner.os != 'Windows'
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_BUILD: "cp37-* cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "pp* *-musllinux*"  # Skip PyPy and musllinux
          CIBW_ARCHS_MACOS: "x86_64 arm64"  # Build both Intel and ARM architectures
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_BEFORE_ALL_LINUX: >
            yum install -y cmake ninja-build
          CIBW_BEFORE_ALL_MACOS: >
            brew install cmake ninja
          CIBW_ENVIRONMENT: >
            SKBUILD_BUILD_VERBOSE=1 FORCE_BDIST_WHEEL_PLAT=""
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ENVIRONMENT_MACOS: ${{ env.CIBW_ENVIRONMENT_MACOS }}
          CIBW_ENVIRONMENT_WINDOWS: ${{ env.CIBW_ENVIRONMENT_WINDOWS }}
      
      # Build wheels using standard method (Windows environment)
      - name: Build wheels (Windows)
        if: runner.os == 'Windows'
        run: |
          # Install build dependencies
          python -m pip install --upgrade pip
          python -m pip install build wheel setuptools scikit-build-core pybind11 numpy cmake

          # Install CMake and Ninja
          choco install -y cmake ninja

          # Use specialized Windows build script
          python tools/wheels/build_windows_wheel.py
        shell: bash
      
      # Upload build artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: py-dem-bones-wheels-${{ runner.os }}
          path: ./wheelhouse/*.whl
          retention-days: 7

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build wheel setuptools
      
      - name: Build sdist
        run: |
          python -m build --sdist
      
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: py-dem-bones-sdist
          path: dist/*.tar.gz
          retention-days: 7

  # Documentation build job
  docs:
    name: Build Documentation
    needs: [build-wheels, build-sdist]  # Add dependency to ensure documentation builds after wheels and sdist
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install nox
          python -m pip install -e ".[dev,docs]"
      
      - name: Build documentation
        shell: bash
        run: |
          python -m nox -s docs
      
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html
          retention-days: 7

  # Publish to GitHub Releases
  github-release:
    name: Create GitHub Release
    needs: [docs, build-wheels, build-sdist]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Requires write permission to create release
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          find artifacts -type f -name "*.whl" -o -name "*.tar.gz" | xargs -I{} cp {} release_assets/
          ls -la release_assets/
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: release_assets/*
          body: |
            ## py-dem-bones v${{ steps.get_version.outputs.VERSION }}
            
            See [CHANGELOG.md](https://github.com/loonghao/py-dem-bones/blob/main/CHANGELOG.md) for details.
            
            ### Installation
            
            ```bash
            pip install py-dem-bones==${{ steps.get_version.outputs.VERSION }}
            ```

  # Publish to PyPI
  publish:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist, github-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write  # Use OIDC for PyPI publishing
    steps:
      - uses: actions/checkout@v4
      
      # Download all build artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      
      - name: Download source distribution
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      
      - name: Display structure of downloaded files
        run: ls -R dist/
      
      # Publish to PyPI using trusted publishing
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true
