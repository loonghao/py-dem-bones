name: Build and Release

# Permissions needed for this workflow
permissions:
  contents: write    # For creating releases and pushing to gh-pages
  pull-requests: write  # For commenting on PRs
  pages: write      # For GitHub Pages deployment
  id-token: write   # For PyPI trusted publishing

on:
  push:
    tags:
      - 'v*'
      - '[0-9]+.[0-9]+.[0-9]+*'
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE*'
      - '.readthedocs.yml'
      - 'CITATION.cff'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - '**.rst'
      - '.hound.yml'
      - '.gitignore'
      - '.gitmodules'
      - '.coveragerc'
      - 'codecov.yml'
      - '.flake8'
      - '.pylintrc'
      - 'renovate.json'
  release:
    types: [published]
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE*'
      - '.readthedocs.yml'
      - 'CITATION.cff'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - '**.rst'
      - '.hound.yml'
      - '.gitignore'
      - '.gitmodules'
      - '.coveragerc'
      - 'codecov.yml'
      - '.flake8'
      - '.pylintrc'
      - 'renovate.json'
  workflow_dispatch:
    inputs:
      fast-mode:
        description: 'Skip building wheels and only run tests'
        required: false
        default: 'false'
        type: boolean
      python-version:
        description: 'Python version to use for testing'
        required: false
        default: '3.10'
        type: choice
        options:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
      os:
        description: 'OS to run tests on'
        required: false
        default: 'ubuntu-latest'
        type: choice
        options:
          - ubuntu-latest
          - windows-latest
          - macos-13
          - macos-14

jobs:
  # Build wheels using cibuildwheel
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds - manylinux_2_28 (x86_64)
          - os: ubuntu-latest
            build: CPython 3.9 64 bits manylinux_2_28
            manylinux: manylinux_2_28
            python: cp39-manylinux_x86_64
            python-version: "3.9"
            arch: x86_64
          - os: ubuntu-latest
            build: CPython 3.10 64 bits manylinux_2_28
            manylinux: manylinux_2_28
            python: cp310-manylinux_x86_64
            python-version: "3.10"
            arch: x86_64
          - os: ubuntu-latest
            build: CPython 3.11 64 bits manylinux_2_28
            manylinux: manylinux_2_28
            python: cp311-manylinux_x86_64
            python-version: "3.11"
            arch: x86_64
          - os: ubuntu-latest
            build: CPython 3.12 64 bits manylinux_2_28
            manylinux: manylinux_2_28
            python: cp312-manylinux_x86_64
            python-version: "3.12"
            arch: x86_64

          # Linux builds - manylinux2014 (x86_64)
          - os: ubuntu-latest
            build: CPython 3.9 64 bits manylinux2014
            manylinux: manylinux2014
            python: cp39-manylinux_x86_64
            python-version: "3.9"
            arch: x86_64
          - os: ubuntu-latest
            build: CPython 3.10 64 bits manylinux2014
            manylinux: manylinux2014
            python: cp310-manylinux_x86_64
            python-version: "3.10"
            arch: x86_64
          - os: ubuntu-latest
            build: CPython 3.11 64 bits manylinux2014
            manylinux: manylinux2014
            python: cp311-manylinux_x86_64
            python-version: "3.11"
            arch: x86_64
          - os: ubuntu-latest
            build: CPython 3.12 64 bits manylinux2014
            manylinux: manylinux2014
            python: cp312-manylinux_x86_64
            python-version: "3.12"
            arch: x86_64

          # Windows builds (AMD64)
          - os: windows-latest
            build: CPython 3.9 64 bits
            python: cp39-win_amd64
            python-version: "3.9"
            arch: AMD64
          - os: windows-latest
            build: CPython 3.10 64 bits
            python: cp310-win_amd64
            python-version: "3.10"
            arch: AMD64
          - os: windows-latest
            build: CPython 3.11 64 bits
            python: cp311-win_amd64
            python-version: "3.11"
            arch: AMD64
          - os: windows-latest
            build: CPython 3.12 64 bits
            python: cp312-win_amd64
            python-version: "3.12"
            arch: AMD64

          # macOS builds - Intel (x86_64)
          - os: macos-13
            build: CPython 3.9 64 bits
            python: cp39-macosx_x86_64
            python-version: "3.9"
            arch: x86_64
          - os: macos-13
            build: CPython 3.10 64 bits
            python: cp310-macosx_x86_64
            python-version: "3.10"
            arch: x86_64
          - os: macos-13
            build: CPython 3.11 64 bits
            python: cp311-macosx_x86_64
            python-version: "3.11"
            arch: x86_64
          - os: macos-13
            build: CPython 3.12 64 bits
            python: cp312-macosx_x86_64
            python-version: "3.12"
            arch: x86_64

          # macOS builds - Apple Silicon (arm64)
          - os: macos-14
            build: CPython 3.9 ARM 64 bits
            python: cp39-macosx_arm64
            python-version: "3.9"
            arch: arm64
          - os: macos-14
            build: CPython 3.10 ARM 64 bits
            python: cp310-macosx_arm64
            python-version: "3.10"
            arch: arm64
          - os: macos-14
            build: CPython 3.11 ARM 64 bits
            python: cp311-macosx_arm64
            python-version: "3.11"
            arch: arm64
          - os: macos-14
            build: CPython 3.12 ARM 64 bits
            python: cp312-macosx_arm64
            python-version: "3.12"
            arch: arm64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Cache Eigen library
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: ${{ runner.os }}-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            ${{ runner.os }}-eigen-

      # Install uv
      - name: Install uv
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # Add uv to PATH - different locations based on OS
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          else
            echo "$USERPROFILE\\.cargo\\bin" >> $GITHUB_PATH
          fi
          # Verify installation
          echo "Verifying uv installation..."
          which uv || echo "uv not found in PATH"

      # Set up Python for cibuildwheel
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # Build wheels using cibuildwheel action
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.0
        with:
          output-dir: wheelhouse
        env:
          CIBW_BUILD: "${{ matrix.python }}"
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_SKIP: "pp* *-musllinux* *-win32 *-manylinux_i686"
          CIBW_BEFORE_BUILD: "pip install -U pip && pip install numpy 'pybind11>=2.10.0' 'scikit-build-core>=0.11.2' cmake"
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ENVIRONMENT: "PYTHONIOENCODING=UTF-8 PIP_NO_BUILD_ISOLATION=1"
          CIBW_ENVIRONMENT_PASS_LINUX: "LANG LC_ALL"
          CIBW_ENVIRONMENT_LINUX: "LANG=C.UTF-8 LC_ALL=C.UTF-8 PYTHONIOENCODING=UTF-8 CMAKE_PREFIX_PATH=/opt/python/{package.platname}"
          CIBW_ENVIRONMENT_WINDOWS: "CMAKE_GENERATOR=Ninja CMAKE_POSITION_INDEPENDENT_CODE=ON"
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
          CIBW_BEFORE_ALL_WINDOWS: "choco install -y ninja && dir \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\" || dir \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\" || dir \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\" || dir \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\""
          CIBW_ENVIRONMENT_MACOS: "MAKEFLAGS=-j4 FORCE_PYTHON_VERSION={python_version}"
          CIBW_MANYLINUX_X86_64_IMAGE: "${{ matrix.manylinux }}"

      # Upload wheels
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.python }}${{ matrix.manylinux && '-' || '' }}${{ matrix.manylinux || '' }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # Run tests during PR
  test-code:
    name: Test code on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    # Only run tests during PR
    if: github.event_name == 'pull_request'
    needs: build-wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt

      # Install uv
      - name: Install uv
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # Add uv to PATH - different locations based on OS
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          else
            echo "$USERPROFILE\\.cargo\\bin" >> $GITHUB_PATH
          fi
          # Verify installation
          echo "Verifying uv installation..."
          which uv || echo "uv not found in PATH"

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          path: dist
          merge-multiple: true

      - name: Install wheel and run tests
        shell: bash
        run: |
          # Find the wheel for the current Python version
          PYTHON_VERSION="${{ matrix.python-version }}"
          PYTHON_VERSION_NO_DOT="${PYTHON_VERSION//./}"

          # Find wheel for the current Python version
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            WHEEL_PATTERN="py_dem_bones-*-cp${PYTHON_VERSION_NO_DOT}-*-win_*.whl"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            WHEEL_PATTERN="py_dem_bones-*-cp${PYTHON_VERSION_NO_DOT}-*-macosx_*.whl"
          else
            WHEEL_PATTERN="py_dem_bones-*-cp${PYTHON_VERSION_NO_DOT}-*-manylinux_*.whl"
          fi

          echo "Looking for wheel matching pattern: $WHEEL_PATTERN"
          WHEEL_PATH=$(find dist -name "$WHEEL_PATTERN" | head -n 1)

          if [ -n "$WHEEL_PATH" ]; then
            echo "Found wheel: $WHEEL_PATH"

            # Install the wheel and test dependencies using uvx
            uvx pip install "$WHEEL_PATH" pytest pytest-cov

            # Run tests with coverage
            uvx pytest tests/test_basic.py -v --cov=py_dem_bones --cov-report=xml:coverage.xml
          else
            echo "No matching wheel found for Python ${{ matrix.python-version }}. Available wheels:"
            ls -la dist
            exit 1
          fi

  # Test Windows compatibility
  test-windows:
    name: Test Windows compatibility
    needs: [build-wheels]
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt

      # Install uv
      - name: Install uv
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # Add uv to PATH - different locations based on OS
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          else
            echo "$USERPROFILE\\.cargo\\bin" >> $GITHUB_PATH
          fi
          # Verify installation
          echo "Verifying uv installation..."
          which uv || echo "uv not found in PATH"

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-cp${{ matrix.python-version == '3.10' && '310' || matrix.python-version == '3.11' && '311' || matrix.python-version == '3.12' && '312' || '39' }}-win_amd64
          path: dist
          merge-multiple: true

      - name: Run Windows compatibility test
        shell: bash
        run: |
          # Run the test-windows nox session
          uvx nox -s test-windows

  # Build source distribution
  build-sdist:
    name: Build source distribution
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt

      # Install uv
      - name: Install uv
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # Add uv to PATH - different locations based on OS
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          else
            echo "$USERPROFILE\\.cargo\\bin" >> $GITHUB_PATH
          fi
          # Verify installation
          echo "Verifying uv installation..."
          which uv || echo "uv not found in PATH"

      # Generate type stubs for C++ extension modules
      - name: Generate type stubs
        shell: bash
        run: |
          # Install required packages
          pip install nox pybind11-stubgen
          # Install the package in development mode
          pip install -e .
          # Run the generate-stubs nox session with SKIP_UV=1
          SKIP_UV=1 python -m nox -s generate-stubs || {
            echo "Warning: Type stub generation failed, but continuing build process"
            # Create minimal stub directory if it doesn't exist
            mkdir -p src/py_dem_bones-stubs
            # Create minimal stub file if it doesn't exist
            if [ ! -f src/py_dem_bones-stubs/__init__.pyi ]; then
              echo "# Minimal fallback stubs for py_dem_bones" > src/py_dem_bones-stubs/__init__.pyi
              echo "from typing import Any" >> src/py_dem_bones-stubs/__init__.pyi
              echo "" >> src/py_dem_bones-stubs/__init__.pyi
              echo "class DemBones: ..." >> src/py_dem_bones-stubs/__init__.pyi
              echo "class DemBonesExt: ..." >> src/py_dem_bones-stubs/__init__.pyi
            fi
          }
          # List generated stubs
          find src -name "*.pyi" | sort

      # Build source distribution using Poetry
      - name: Build source distribution
        run: |
          # Build source distribution using Poetry
          uvx poetry build --format sdist

      # Upload source distribution
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: ./dist/*.tar.gz
          if-no-files-found: error

  # Release to PyPI
  release:
    name: Release
    needs: [build-wheels, build-sdist, test-windows]
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    environment:
      name: release
      url: https://pypi.org/p/py-dem-bones

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt

      # Install uv
      - name: Install uv
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # Add uv to PATH - different locations based on OS
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          else
            echo "$USERPROFILE\\.cargo\\bin" >> $GITHUB_PATH
          fi
          # Verify installation
          echo "Verifying uv installation..."
          which uv || echo "uv not found in PATH"

      # Download all artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      # List all artifacts
      - name: List all artifacts
        run: find dist -type f | sort

      # Generate release notes from changelog
      - name: Generate Release Notes
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          CHANGES=$(grep -A 100 "## $VERSION" CHANGELOG.md | grep -B 100 -m 2 "^## " | grep -v "^## $VERSION" | grep -v "^## " | sed '/^$/d')
          TEMPLATE=$(cat .github/release-template.md)
          TEMPLATE="${TEMPLATE//\$RELEASE_VERSION/$VERSION}"
          TEMPLATE="${TEMPLATE//\$CHANGES/$CHANGES}"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$TEMPLATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash

      # Update release notes
      - name: Update Release Notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          body_path: ${{ github.workspace }}/.github/release-template.md
          files: dist/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Publish to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
