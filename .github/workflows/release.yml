name: Build and Release

on:
  push:
    tags:
      - 'v*'
      - '[0-9]+.[0-9]+.[0-9]+*'
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE*'
      - '.readthedocs.yml'
      - 'CITATION.cff'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - '**.rst'
      - '.hound.yml'
      - '.gitignore'
      - '.gitmodules'
      - '.coveragerc'
      - 'codecov.yml'
      - '.flake8'
      - '.pylintrc'
      - 'renovate.json'
  release:
    types: [published]
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE*'
      - '.readthedocs.yml'
      - 'CITATION.cff'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - '**.rst'
      - '.hound.yml'
      - '.gitignore'
      - '.gitmodules'
      - '.coveragerc'
      - 'codecov.yml'
      - '.flake8'
      - '.pylintrc'
      - 'renovate.json'
  workflow_dispatch:
    inputs:
      fast-mode:
        description: 'Fast mode (reduced build variants)'
        required: false
        default: 'false'
        type: choice
        options: ['true', 'false']
      test-wheels:
        description: 'Test wheels compatibility'
        required: false
        default: 'false'
        type: choice
        options: ['true', 'false']
# Permissions needed for this workflow
permissions:
  contents: write    # For creating releases and pushing to gh-pages
  pull-requests: write  # For commenting on PRs
  pages: write      # For GitHub Pages deployment
  id-token: write   # For PyPI trusted publishing

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Build source distribution
  build-sdist:
    name: Build source distribution
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt

      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc g++
        shell: bash

      # Set up ccache
      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: sdist-ccache
          max-size: 2G

      - name: Build SDist
        run: |
          python -m pip install build numpy pybind11 scikit-build-core cmake setuptools_scm
          python -m build --sdist

      - name: Test SDist
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov numpy
          python -m pip install dist/*.tar.gz
          python -c "import py_dem_bones; print(py_dem_bones.__version__)"
          python -m pytest tests --cov=py_dem_bones --cov-report=term --cov-report=xml -v || echo "Tests failed but continuing"

      - name: Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          if-no-files-found: error

  # Build wheels for Linux
  build-wheels-linux:
    name: Build ${{ matrix.python }} wheels on Linux
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: [cp38, cp39, cp310, cp311, cp312]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Cache Eigen library
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: Linux-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            Linux-eigen-

      # Set up ccache
      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: Linux-ccache-${{ matrix.python }}
          max-size: 2G

      # Build wheels using cibuildwheel action
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.1
        with:
          output-dir: wheelhouse
        env:
          # Build only the specified Python version
          CIBW_BUILD: "${{ matrix.python }}-manylinux*"
          # Skip PyPy, musllinux, and manylinux_i686
          CIBW_SKIP: "pp* *-musllinux* *-manylinux_i686"
          # Use config file for most settings
          CIBW_CONFIG_FILE: "{package}/.cibuildwheel.toml"
          # Set build verbosity
          CIBW_BUILD_VERBOSITY: 3

      # Upload wheels
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.python }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # Build wheels for Windows
  build-wheels-windows:
    name: Build ${{ matrix.python }} wheels on Windows
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python: [cp38, cp39, cp310, cp311, cp312]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Cache Eigen library
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: Windows-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            Windows-eigen-

      # Set up ccache
      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: Windows-ccache-${{ matrix.python }}
          max-size: 2G

      # Build wheels using cibuildwheel action
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.1
        with:
          output-dir: wheelhouse
        env:
          # Build only the specified Python version
          CIBW_BUILD: "${{ matrix.python }}-win*"
          # Skip PyPy and win32
          CIBW_SKIP: "pp* *-win32"
          # Use config file for most settings
          CIBW_CONFIG_FILE: "{package}/.cibuildwheel.toml"
          # Set build verbosity
          CIBW_BUILD_VERBOSITY: 3
          # Windows: install Ninja and delvewheel
          CIBW_BEFORE_ALL_WINDOWS: >
            pip install delvewheel &&
            choco install -y ninja &&
            dir "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise" ||
            dir "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community" ||
            dir "C:\Program Files\Microsoft Visual Studio\2022\Enterprise" ||
            dir "C:\Program Files\Microsoft Visual Studio\2022\Community"

      # Upload wheels
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.python }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # Build wheels for macOS Intel
  build-wheels-macos:
    name: Build ${{ matrix.python }} wheels on macOS Intel
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        python: [cp38, cp39, cp310, cp311, cp312]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Cache Eigen library
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: macOS-Intel-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            macOS-Intel-eigen-

      # Set up ccache
      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: macOS-Intel-ccache-${{ matrix.python }}
          max-size: 2G

      # Build wheels using cibuildwheel action
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.1
        with:
          output-dir: wheelhouse
        env:
          # Build only the specified Python version for x86_64
          CIBW_BUILD: "${{ matrix.python }}-macosx_x86_64"
          # Skip PyPy
          CIBW_SKIP: "pp*"
          # Use config file for most settings
          CIBW_CONFIG_FILE: "{package}/.cibuildwheel.toml"
          # Set build verbosity
          CIBW_BUILD_VERBOSITY: 3

      # Upload wheels
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-intel-${{ matrix.python }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # Build wheels for macOS Apple Silicon
  build-wheels-macos-arm:
    name: Build ${{ matrix.python }} wheels on macOS ARM
    if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.fast-mode == 'true') && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') }}
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        python: [cp39, cp310, cp311, cp312]
        # Note: cp38 is excluded as it's not available on macOS ARM

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Cache Eigen library
      - name: Cache Eigen library
        uses: actions/cache@v4
        with:
          path: extern/eigen
          key: macOS-ARM-eigen-${{ hashFiles('.github/scripts/*/setup_eigen.sh') }}
          restore-keys: |
            macOS-ARM-eigen-

      # Set up ccache
      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: macOS-ARM-ccache-${{ matrix.python }}
          max-size: 2G

      # Build wheels using cibuildwheel action
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.1
        with:
          output-dir: wheelhouse
        env:
          # Build only the specified Python version for arm64
          CIBW_BUILD: "${{ matrix.python }}-macosx_arm64"
          # Skip PyPy
          CIBW_SKIP: "pp*"
          # Use config file for most settings
          CIBW_CONFIG_FILE: "{package}/.cibuildwheel.toml"
          # Set build verbosity
          CIBW_BUILD_VERBOSITY: 3

      # Upload wheels
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-arm-${{ matrix.python }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  # Test Linux wheels
  test-linux-wheels:
    name: Test Linux ${{ matrix.python }} wheel
    if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [build-wheels-linux]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: [cp38, cp39, cp310, cp311, cp312]
        include:
          - python: cp38
            python-version: '3.8'
          - python: cp39
            python-version: '3.9'
          - python: cp310
            python-version: '3.10'
          - python: cp311
            python-version: '3.11'
          - python: cp312
            python-version: '3.12'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux-${{ matrix.python }}
          path: ./wheelhouse

      - name: List wheels
        run: |
          ls -la ./wheelhouse/
          echo "Found $(ls ./wheelhouse/*.whl | wc -l) wheels"

      - name: Install wheel and dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov numpy
          python -m pip install wheelhouse/*.whl
          python -c "import py_dem_bones; print(f'Installed py_dem_bones version: {py_dem_bones.__version__}, dem_bones version: {py_dem_bones.__dem_bones_version__}')"

      - name: Install nox
        run: |
          python -m pip install nox

      - name: Run tests with nox
        run: |
          python -m nox -s pytest_skip_install

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  # Test Windows wheels
  test-windows-wheels:
    name: Test Windows ${{ matrix.python }} wheel
    if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [build-wheels-windows]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python: [cp38, cp39, cp310, cp311, cp312]
        include:
          - python: cp38
            python-version: '3.8'
          - python: cp39
            python-version: '3.9'
          - python: cp310
            python-version: '3.10'
          - python: cp311
            python-version: '3.11'
          - python: cp312
            python-version: '3.12'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels-windows-${{ matrix.python }}
          path: ./wheelhouse

      - name: List wheels
        shell: pwsh
        run: |
          Get-ChildItem -Path ./wheelhouse/ -Recurse
          Write-Host "Found $((Get-ChildItem -Path ./wheelhouse/ -Filter *.whl).Count) wheels"

      - name: Install wheel and dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov numpy
          python -m pip install (Get-ChildItem -Path ./wheelhouse/*.whl).FullName
          python -c "import py_dem_bones; print(f'Installed py_dem_bones version: {py_dem_bones.__version__}, dem_bones version: {py_dem_bones.__dem_bones_version__}')"

      - name: Install nox
        shell: pwsh
        run: |
          python -m pip install nox

      - name: Run tests with nox
        shell: pwsh
        run: |
          python -m nox -s pytest_skip_install

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  # Test macOS Intel wheels
  test-macos-intel-wheels:
    name: Test macOS Intel ${{ matrix.python }} wheel
    if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [build-wheels-macos]
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        python: [cp38, cp39, cp310, cp311, cp312]
        include:
          - python: cp38
            python-version: '3.8'
          - python: cp39
            python-version: '3.9'
          - python: cp310
            python-version: '3.10'
          - python: cp311
            python-version: '3.11'
          - python: cp312
            python-version: '3.12'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels-macos-intel-${{ matrix.python }}
          path: ./wheelhouse

      - name: List wheels
        run: |
          ls -la ./wheelhouse/
          echo "Found $(ls ./wheelhouse/*.whl | wc -l) wheels"

      - name: Install wheel and dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov numpy
          python -m pip install wheelhouse/*.whl
          python -c "import py_dem_bones; print(f'Installed py_dem_bones version: {py_dem_bones.__version__}, dem_bones version: {py_dem_bones.__dem_bones_version__}')"

      - name: Install nox
        run: |
          python -m pip install nox

      - name: Run tests with nox
        run: |
          python -m nox -s pytest_skip_install

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  # Test macOS ARM wheels
  test-macos-arm-wheels:
    name: Test macOS ARM ${{ matrix.python }} wheel
    if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [build-wheels-macos-arm]
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        python: [cp39, cp310, cp311, cp312]
        include:
          - python: cp39
            python-version: '3.9'
          - python: cp310
            python-version: '3.10'
          - python: cp311
            python-version: '3.11'
          - python: cp312
            python-version: '3.12'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels-macos-arm-${{ matrix.python }}
          path: ./wheelhouse

      - name: List wheels
        run: |
          ls -la ./wheelhouse/
          echo "Found $(ls ./wheelhouse/*.whl | wc -l) wheels"

      - name: Install wheel and dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov numpy
          python -m pip install wheelhouse/*.whl
          python -c "import py_dem_bones; print(f'Installed py_dem_bones version: {py_dem_bones.__version__}, dem_bones version: {py_dem_bones.__dem_bones_version__}')"

      - name: Install nox
        run: |
          python -m pip install nox

      - name: Run tests with nox
        run: |
          python -m nox -s pytest_skip_install

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true





  # Create GitHub Release and publish to PyPI
  release:
    name: Release
    needs: [build-wheels-linux, build-wheels-windows, build-wheels-macos, build-wheels-macos-arm, build-sdist, test-linux-wheels, test-windows-wheels, test-macos-intel-wheels, test-macos-arm-wheels]
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    environment:
      name: release
      url: https://pypi.org/p/py-dem-bones
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          CHANGES=$(grep -A 100 "## $VERSION" CHANGELOG.md | grep -B 100 -m 2 "^## " | grep -v "^## $VERSION" | grep -v "^## " | sed '/^$/d')
          TEMPLATE=$(cat .github/release-template.md)
          TEMPLATE="${TEMPLATE//\$RELEASE_VERSION/$VERSION}"
          TEMPLATE="${TEMPLATE//\$CHANGES/$CHANGES}"
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$TEMPLATE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      # Update release notes
      - name: Update Release Notes
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: dist/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Publish to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
