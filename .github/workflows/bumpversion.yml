name: Bump version

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE*'
      - '.readthedocs.yml'
      - 'CITATION.cff'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - '**.rst'
      - '.hound.yml'
      - '.gitignore'
      - '.gitmodules'
      - '.coveragerc'
      - 'codecov.yml'
      - '.flake8'
      - '.pylintrc'
      - 'renovate.json'

jobs:
  bump-version:
    if: "!startsWith(github.event.head_commit.message, 'bump:') && !startsWith(github.event.head_commit.message, 'chore(release)')"
    runs-on: ubuntu-latest
    name: "Bump version and create changelog with commitizen"
    permissions:
      contents: write
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: '${{ secrets.PERSONAL_ACCESS_TOKEN }}'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install commitizen setuptools_scm

      - name: Create bump and changelog
        id: bump
        run: |
          # Get current version before bump
          CURRENT_VERSION=$(cz version --project)
          echo "Current version: $CURRENT_VERSION"

          # Analyze commits to determine increment type
          # Check for breaking changes
          BREAKING_CHANGES=$(git log --grep="BREAKING CHANGE" --since="$(git describe --tags --abbrev=0)" --pretty=format:"%s" | wc -l)
          # Check for new features
          FEATURES=$(git log --grep="^feat" --since="$(git describe --tags --abbrev=0)" --pretty=format:"%s" | wc -l)
          # Check for bug fixes
          FIXES=$(git log --grep="^fix" --since="$(git describe --tags --abbrev=0)" --pretty=format:"%s" | wc -l)

          # Determine increment type
          INCREMENT="patch"  # Default to patch
          if [ "$BREAKING_CHANGES" -gt 0 ]; then
            INCREMENT="major"
            echo "Found breaking changes, will do a major version bump"
          elif [ "$FEATURES" -gt 0 ]; then
            INCREMENT="minor"
            echo "Found new features, will do a minor version bump"
          else
            echo "Found fixes or other changes, will do a patch version bump"
          fi

          echo "Increment type: $INCREMENT"

          # Bump version with determined increment
          cz bump --increment $INCREMENT --yes

          # Get new version after bump
          NEW_VERSION=$(cz version --project)
          echo "New version: $NEW_VERSION"

          # Set output for later steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "increment_type=$INCREMENT" >> $GITHUB_OUTPUT

          # Push changes
          git push
          git push --tags
        env:
          GIT_COMMITTER_NAME: "GitHub Actions"
          GIT_COMMITTER_EMAIL: "actions@github.com"
          GIT_AUTHOR_NAME: "GitHub Actions"
          GIT_AUTHOR_EMAIL: "actions@github.com"

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get the changelog for the new version
          VERSION="${{ steps.bump.outputs.new_version }}"
          INCREMENT="${{ steps.bump.outputs.increment_type }}"

          # Extract changes from CHANGELOG.md for this version
          CHANGES=$(grep -A 100 "## $VERSION" CHANGELOG.md | grep -B 100 -m 2 "^## " | grep -v "^## $VERSION" | grep -v "^## " | sed '/^$/d')

          # Create release notes
          NOTES="## Release $VERSION ($INCREMENT version bump)\n\n"
          NOTES+="### Changes in this release:\n\n"
          NOTES+="$CHANGES\n\n"
          NOTES+="### Commit Statistics:\n"
          NOTES+="- Breaking changes: $(git log --grep='BREAKING CHANGE' --since='$(git describe --tags --abbrev=0)' --pretty=format:'%h' | wc -l | xargs)\n"
          NOTES+="- New features: $(git log --grep='^feat' --since='$(git describe --tags --abbrev=0)' --pretty=format:'%h' | wc -l | xargs)\n"
          NOTES+="- Bug fixes: $(git log --grep='^fix' --since='$(git describe --tags --abbrev=0)' --pretty=format:'%h' | wc -l | xargs)\n"
          NOTES+="- Other changes: $(git log --grep='^(docs|style|refactor|perf|test|build|ci|chore)' --since='$(git describe --tags --abbrev=0)' --pretty=format:'%h' | wc -l | xargs)\n\n"
          NOTES+="See [CHANGELOG.md](https://github.com/loonghao/py-dem-bones/blob/main/CHANGELOG.md) for full details."

          # Save notes to output
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.new_version }}
          name: "Release ${{ steps.bump.outputs.new_version }} (${{ steps.bump.outputs.increment_type }})"
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
