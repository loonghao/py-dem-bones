[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "cmake>=3.15",
    "ninja; sys_platform != 'win32' and platform_machine != 'arm64'",
    "pybind11>=2.10.0",
    "numpy>=1.20.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "py-dem-bones"
version = "0.6.6"
description = "Python bindings for the Dem Bones library"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "BSD-3-Clause"}
authors = [
    {name = "Long Hao", email = "hal.long@outlook.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: C++",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "numpy>=1.20.0",
]

[project.optional-dependencies]
dev = [
    "nox>=2023.4.22",
    "cibuildwheel>=2.16.0",
]
test = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
]
docs = [
    "sphinx>=7.0.0",
    "pydata-sphinx-theme>=0.14.1",
    "sphinx-autobuild>=2021.3.14",
    "pybind11-stubgen>=0.16.0",
    "myst-parser>=2.0.0",
    "sphinx-gallery>=0.13.0",
    "pillow>=9.0.0",
    "matplotlib>=3.5.0",
    "myst-sphinx-gallery>=0.3.0",
    "myst-nb>=1.0.0",
]
docs-linux = [
    "cairosvg>=2.7.0",
]
lint = [
    "black<23.3.0",
    "ruff<0.0.270",
    "isort<5.12.0",
    "autoflake>=2.0.0",
]
build = [
    "build>=0.10.0",
    "twine>=4.0.2",
]

[project.urls]
Homepage = "https://github.com/loonghao/py-dem-bones"
Documentation = "https://loonghao.github.io/py-dem-bones"
Issues = "https://github.com/loonghao/py-dem-bones/issues"
Changelog = "https://github.com/loonghao/py-dem-bones/blob/main/CHANGELOG.md"

# MANIFEST.in handles source distribution configuration

# cibuildwheel configuration
[tool.cibuildwheel]
build-verbosity = "1"
skip = "pp* *-musllinux* *-win32 *-manylinux_i686"
test-requires = ["numpy"]
test-command = [
    "python -c \"import py_dem_bones; print(f'Successfully loaded py_dem_bones version {py_dem_bones.__version__}')\"",
    "python {project}/tests/test_basic.py"
]

# cibuildwheel Linux configuration
[tool.cibuildwheel.linux]
before-all = "yum install -y ccache && exit 0 || (apt-get update && apt-get install -y ccache && exit 0) || (apk add --no-cache ccache && exit 0) || echo 'Failed to install ccache with any package manager'"
environment = { LANG="C.UTF-8", LC_ALL="C.UTF-8", CMAKE_PREFIX_PATH="/opt/python/{package.platname}", CCACHE_DIR="$HOME/.ccache", CC="ccache gcc", CXX="ccache g++" }
environment-pass = ["LANG", "LC_ALL", "CCACHE_DIR"]

# cibuildwheel macOS configuration
[tool.cibuildwheel.macos]
# macOS ARM wheels needs 11.0, cibuildwheel will automatically bump where appropriate
before-all = "brew install ccache"
environment = { MAKEFLAGS="-j4", MACOSX_DEPLOYMENT_TARGET="11.0", CCACHE_DIR="$HOME/.ccache", CC="ccache clang", CXX="ccache clang++" }
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"

# cibuildwheel Windows configuration
[tool.cibuildwheel.windows]
before-all = "choco install -y ninja --force"
environment = { PATH="$GITHUB_WORKSPACE/doxygen;$PATH", CMAKE_GENERATOR="Ninja", CMAKE_POSITION_INDEPENDENT_CODE="ON" }

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.6.6"
tag-format = "$version"
update_changelog_on_bump = true
change_type_order = ["BREAKING CHANGE", "feat", "fix", "refactor", "perf", "ci", "build", "docs", "test", "chore"]
version-files = [
    "pyproject.toml:version",
    "src/py_dem_bones/__version__.py:__version__",
    "docs/conf.py:release",
    "docs/conf.py:version",
    ".github/CITATION.cff:version",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.ruff]
line-length = 120
target-version = "py37"
# Ignore extern directory and generated stub files
exclude = ["extern", "**/*.pyi"]
src = ["src", "nox_actions", "noxfile.py"]
select = ["E", "F", "W", "I"]
ignore = ["W293"]  # Ignore whitespace warnings in blank lines

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"noxfile.py" = ["E402"]
"docs/conf.py" = ["E402", "F401"]

[tool.isort]
profile = "black"
line_length = 120
skip = ["extern"]
skip_glob = ["*.pyi"]
