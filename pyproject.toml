# py-dem-bones: Python bindings for the Dem Bones library
# This project uses scikit-build-core to build C++ extensions and Poetry for dependency management

[build-system]
# Build system dependencies
requires = [
    "scikit-build-core>=0.11.3",         # For Python 3.9+
    "pybind11>=2.13.6",                  # For Python 3.9+
    "numpy>=1.20.0",             # Numerical computation library
    "setuptools>=42.0.0",        # Installation tools
    "wheel>=0.36.0",             # Wheel packaging tool
    "poetry-core>=1.0.0",        # Poetry core functionality
]
build-backend = "scikit_build_core.build"  # Use scikit-build-core as the build backend

# PEP 621 project metadata for scikit-build-core
[project]
name = "py-dem-bones"
version = "0.6.5"
description = "Python bindings for the Dem Bones library"
readme = "README.md"
license = {text = "BSD-3-Clause"}
authors = [
    {name = "Long Hao", email = "hal.long@outlook.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: C++",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
# Support Python 3.9 and above (VFX Platform standard)
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.20.0",  # Numerical computation library
]

# Project related links
[project.urls]
repository = "https://github.com/loonghao/py-dem-bones"
homepage = "https://github.com/loonghao/py-dem-bones"
documentation = "https://loonghao.github.io/py-dem-bones"
changelog = "https://github.com/loonghao/py-dem-bones/blob/main/CHANGELOG.md"
issues = "https://github.com/loonghao/py-dem-bones/issues"

# Poetry configuration (for dependency management)
[tool.poetry]
name = "py-dem-bones"
version = "0.6.5"
description = "Python bindings for the Dem Bones library"
readme = "README.md"
license = "BSD-3-Clause"
authors = [
    "Long Hao <hal.long@outlook.com>",
]
packages = [{include = "py_dem_bones", from = "src"}]  # Specify package path
keywords = ["animation", "skinning", "rigging", "computer graphics", "3d"]
include = ["LICENSE.md", "README.md", "CHANGELOG.md"]
exclude = ["extern/dem-bones/test/**/*"]

# Poetry URL configuration
[tool.poetry.urls]
changelog = "https://github.com/loonghao/py-dem-bones/blob/main/CHANGELOG.md"
issues = "https://github.com/loonghao/py-dem-bones/issues"

# Poetry dependency configuration
[tool.poetry.dependencies]
python = ">=3.9"  # Support Python 3.9 and above (VFX Platform standard)
numpy = ">=1.20.0"  # Numerical computation library

# Test dependencies (optional)
[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = ">=7.4.0"  # Testing framework (updated)
pytest-cov = ">=4.1.0"  # Test coverage tool (updated)
pytest-timeout = ">=2.1.0"  # Test timeout plugin
pytest-xdist = ">=3.3.0"  # Parallel test execution
pytest-benchmark = ">=4.0.0"  # Benchmarking tool
pytest-rerunfailures = ">=12.0"  # Re-run failed tests

# Development dependencies (optional)
[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black = ">=23.7.0"  # Code formatter
isort = ">=5.12.0"  # Import sorter
ruff = ">=0.0.287"  # Fast linter
mypy = ">=1.5.0"  # Type checker
pre-commit = ">=3.3.3"  # Pre-commit hooks
build = ">=1.0.0"  # PEP 517 build tool
twine = ">=4.0.2"  # Package upload tool
cmake = ">=3.26.0"  # CMake for development
ninja = ">=1.11.0"  # Ninja build system

# Documentation dependencies (optional)
[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = ">=7.1.0"  # Documentation generator
sphinx-rtd-theme = ">=1.3.0"  # Read the Docs theme
sphinx-autodoc-typehints = ">=1.24.0"  # Type hints in documentation
myst-parser = ">=2.0.0"  # Markdown support for Sphinx

# Build dependencies (optional)
[tool.poetry.group.build]
optional = true

[tool.poetry.group.build.dependencies]
scikit-build-core = ">=0.10.0"  # For building C++ extensions
pybind11 = ">=2.10.0"  # For Python/C++ bindings

# scikit-build configuration
[tool.scikit-build]
wheel.packages = ["src/py_dem_bones"]  # Specify packaging path
wheel.exclude = ["tests/*"]  # Exclude test files
wheel.expand-macos-universal-tags = true  # Support macOS universal binaries
# Files to include in the source distribution
sdist.include = ["src/py_dem_bones/*", "src/binding/*", "CMakeLists.txt", "LICENSE.md", "README.md", "extern/dem-bones/*", "extern/eigen/*"]
sdist.exclude = ["tests/data/*"]  # Exclude test data
# Enable parallel build by default
build.jobs = "auto"  # Use all available cores for building
# Enable verbose output for debugging
build.verbose = false  # Set to true for verbose output when debugging
# Set build directory for caching between builds
build-dir = ".scikit-build"  # Cache builds for faster rebuilds
# Ensure reproducible builds
sdist.reproducible = true  # Make SDist reproducible

# CMake configuration
[tool.scikit-build.cmake]
version = ">=3.15"  # Require CMake 3.15 or above
build-type = "Release"  # Build type is Release
# Use Ninja generator if available for faster builds
generator = "Ninja"  # Falls back to platform default if Ninja is not available
# Build options
build-options = ["-j2"]  # Limit parallel jobs to avoid memory issues
# Additional CMake arguments
args = ["-DCMAKE_POSITION_INDEPENDENT_CODE=ON"]  # Ensure position independent code

# Ninja configuration
[tool.scikit-build.ninja]
version = ">=1.10"  # Require Ninja 1.10 or above
make-fallback = true  # Fall back to make if Ninja is not available

# CMake definitions
[tool.scikit-build.cmake.define]
# Do not use Python stable ABI as pybind11 is not compatible with it
PYTHON_LIMITED_API = "OFF"  # Disable Python stable ABI
# Enable better error messages from pybind11
PYBIND11_DETAILED_ERROR_MESSAGES = "ON"
# Enable OpenMP if available
PY_DEM_BONES_USE_OPENMP = "ON"

# Backport FindPython from CMake 3.26.1 for better Python detection
[tool.scikit-build.backport]
find-python = "3.26.1"  # Backport FindPython from CMake 3.26.1

# Installation settings
[tool.scikit-build.install]
strip = true  # Strip binaries in release builds

# Commitizen configuration (for version management and commit conventions)
[tool.commitizen]
name = "cz_conventional_commits"  # Use conventional commit format
version = "0.6.6"  # Current version
tag_format = "$version"  # Tag format without 'v' prefix
version_files = [  # Files to update version in
    "pyproject.toml:version",
    "src/py_dem_bones/__version__.py:__version__",
    "docs/conf.py:release",
    "docs/conf.py:version",
    ".github/CITATION.cff:version",
]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]  # Test file paths
python_files = "test_*.py"  # Test file naming convention
python_classes = "Test*"  # Test class naming convention
python_functions = "test_*"  # Test function naming convention
addopts = "--cov=py_dem_bones --cov-report=term-missing --cov-report=xml:coverage.xml --verbose --benchmark-skip"  # Test parameters
# Fail on warnings to catch potential issues early
filterwarnings = [
    "error",  # Treat warnings as errors
    "ignore::DeprecationWarning:distutils.*:",  # Ignore distutils deprecation warnings
    "ignore::DeprecationWarning:pkg_resources.*:",  # Ignore pkg_resources deprecation warnings
    "ignore::DeprecationWarning:numpy.*:",  # Ignore NumPy deprecation warnings
    "ignore::ImportWarning",  # Ignore import warnings
]
# Timeout for tests to prevent hanging
timeout = 300  # 5 minutes timeout per test
# Parallel test execution
xvs_numprocesses = "auto"  # Use all available cores for testing
# Benchmark configuration
benchmark_warmup = "auto"
benchmark_warmup_iterations = 10
benchmark_min_rounds = 5
# Re-run failed tests
reruns = 2  # Re-run failed tests twice
reruns_delay = 1  # Wait 1 second between re-runs

# isort configuration
[tool.isort]
profile = "black"  # Compatible with black formatter
multi_line_output = 3  # Vertical hanging indent
include_trailing_comma = true  # Include trailing comma in multi-line imports
force_grid_wrap = 0  # Don't force grid wrap
use_parentheses = true  # Use parentheses for imports
ensure_newline_before_comments = true  # Ensure newline before comments
line_length = 88  # Same as black's default line length
known_first_party = ["py_dem_bones"]  # Treat py_dem_bones as first party
known_third_party = ["numpy", "pybind11", "pytest"]  # Known third party imports
skip = ["extern", "*.pyi"]  # Skip extern directory and .pyi files
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]  # Import sections order

# ruff configuration
[tool.ruff]
line-length = 88  # Same as black's default line length
target-version = "py37"  # Target Python 3.7
select = ["E", "F", "W"]  # Error, Flake8, Warning
# 忽略一些特定问题
ignore = [
    "E501",  # Line too long (handled by black)
    "F821",  # Undefined name (issues with type stubs)
]

# Exclude files and directories
exclude = [
    ".git",
    ".github",
    "__pycache__",
    "build",
    "dist",
    "extern",
    "venv",
    ".venv",
    "*.egg-info",
    "*.pyi",  # Exclude type stub files
]

# black configuration
[tool.black]
line-length = 88  # Default line length
target-version = ["py39", "py310", "py311", "py312"]  # Target Python versions (VFX Platform standard)
include = '\.pyi?$'  # Include Python files and type stubs
exclude = '''(
    /(\.
      | \.git
      | \.github
      | __pycache__
      | build
      | dist
      | extern
      | venv
      | \.venv
      | .*\.egg-info
    )/
)'''  # Exclude patterns

# cibuildwheel configuration is in GitHub Actions workflow files
