# cibuildwheel configuration for py-dem-bones
# This file configures the build process for wheel packages using cibuildwheel

# Build selection (VFX Platform standard: Python 3.9+)
[tool.cibuildwheel]
build = ["cp39-*", "cp310-*", "cp311-*", "cp312-*"]
skip = ["pp*", "*-musllinux*"]
archs = ["auto64"]

# General settings
build-verbosity = 3
test-command = "python -c \"import py_dem_bones; print(f'Successfully imported py_dem_bones version: {py_dem_bones.__version__}')\""
test-requires = ["pytest", "numpy>=1.20.0"]
build-frontend = "pip"

# Environment variables for all platforms
environment = {
    PIP_DISABLE_PIP_VERSION_CHECK="1", 
    CMAKE_BUILD_PARALLEL_LEVEL="2", 
    SKBUILD_CMAKE_ARGS="-DCMAKE_VERBOSE_MAKEFILE=ON -DPYTHON_LIMITED_API=ON -DPYBIND11_PYTHON_VERSION=3.9"
}
before-build = [
    "git submodule update --init --recursive",
    "pip install -U pip setuptools wheel cmake ninja",
    "python -c \"import sys; print(f'Python {sys.version}')\""
]

# Linux specific settings
[tool.cibuildwheel.linux]
manylinux-x86_64-image = "manylinux2014"
manylinux-i686-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
before-all = [
    "yum install -y cmake ninja-build gcc-c++ make libgomp-devel || apt-get update && apt-get install -y cmake ninja-build g++ make libgomp-dev"
]
environment = {
    CFLAGS="-fPIC", 
    CXXFLAGS="-fPIC", 
    CCACHE_DIR="/host/.ccache", 
    CCACHE_COMPRESS="1", 
    CCACHE_COMPRESSLEVEL="6", 
    CCACHE_MAXSIZE="500M"
}

# macOS specific settings
[tool.cibuildwheel.macos]
environment = {
    MACOSX_DEPLOYMENT_TARGET="10.14", 
    CCACHE_DIR="/Users/runner/.ccache", 
    CCACHE_COMPRESS="1", 
    CCACHE_COMPRESSLEVEL="6", 
    CCACHE_MAXSIZE="500M"
}
before-all = [
    "brew install ccache ninja"
]

# Windows specific settings
[tool.cibuildwheel.windows]
environment = {
    CCACHE_DIR="C:\\Users\\runneradmin\\.ccache", 
    CCACHE_COMPRESS="1", 
    CCACHE_COMPRESSLEVEL="6", 
    CCACHE_MAXSIZE="500M"
}
before-all = [
    "pip install delvewheel"
]
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
